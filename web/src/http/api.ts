/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * dev.stage
 * OpenAPI spec version: 1.0.0
 */
/**
 * @nullable
 */
export type GetInvitesSubscriberId302 = typeof GetInvitesSubscriberId302[keyof typeof GetInvitesSubscriberId302] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberId302 = {
  null: 'null',
} as const;

export type GetRanking200RankingItem = {
  id: string;
  name: string;
  score: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};

export type GetSubscribersSubscriberIdRankingClicks200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingCount200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null;
};

export type PostSubscriptionsBody = {
  name: string;
  email: string;
  /** @nullable */
  referrer?: string | null;
};

export type PostSubscriptions201 = {
  id: string;
};

/**
 * Handles access to a referral link and redirects the user to the frontend application.

- Increments the referral access counter in Redis for the provided `subscriberId`.
- Appends the `subscriberId` as a `referrer` query parameter in the redirect URL.
- Returns a `302 Found` status to redirect the user.

Useful for tracking how many times a referral link has been clicked.
 * @summary Redirect to the frontend using a referral link
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (subscriberId: string, options?: RequestInit): Promise<unknown> => {
  
  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}



/**
 * Returns the top 3 subscribers with the highest number of successful referrals.

Each ranked subscriber includes their ID, name, and referral score.

- The ranking is sorted by referral performance in descending order.
- Useful for displaying leaderboard highlights or incentivizing top participants.
 * @summary Retrieve top 3 subscribers in the referral ranking
 */
export const getGetRankingUrl = () => {


  

  return `http://localhost:3333/ranking`
}

export const getRanking = async ( options?: RequestInit): Promise<GetRanking200> => {
  
  const res = await fetch(getGetRankingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Returns how many times the referral link for the given `subscriberId` has been accessed.

- If no clicks have been registered, returns `0`.

This is useful for tracking engagement with shared invite links.
 * @summary Get number of times a referral link was clicked
 */
export const getGetSubscribersSubscriberIdRankingClicksUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscribersSubscriberIdRankingClicks = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingClicks200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingClicksUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Returns the total number of successful referrals made by the given subscriber.

This represents how many people joined the event using this subscriber’s referral link or code.

- Provide the `subscriberId` as a route parameter.
- The returned count reflects confirmed/valid subscriptions attributed to the subscriber.

Useful for tracking performance in referral campaigns and displaying personal progress.
 * @summary Retrieve total invites by a subscriber
 */
export const getGetSubscribersSubscriberIdRankingCountUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscribersSubscriberIdRankingCount = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingCount200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingCountUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Returns the current position of the given subscriber in the referral leaderboard.

The ranking is based on the number of successful referrals attributed to the subscriber.

- Provide the `subscriberId` as a route parameter.
- If the subscriber is not ranked (e.g. no referrals), the position may be `null`.

Useful for displaying leaderboard positions or personal progress within the referral campaign.
 * @summary Retrieve the ranking position of a subscriber
 */
export const getGetSubscribersSubscriberIdRankingPositionUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`
}

export const getSubscribersSubscriberIdRankingPosition = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingPosition200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingPositionUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * Creates a new subscription by registering a user with their name and email.

Optionally, a referrer ID can be provided to track who referred the subscriber.

- The email must be valid.
- If the email has already been registered, the existing subscription ID is returned instead of creating a new one.
- If a referrer ID is provided, it must reference an existing subscriber.

Returns the ID of the newly created or previously existing subscription.
 * @summary Subscribe a user to the event
 */
export const getPostSubscriptionsUrl = () => {


  

  return `http://localhost:3333/subscriptions`
}

export const postSubscriptions = async (postSubscriptionsBody: PostSubscriptionsBody, options?: RequestInit): Promise<PostSubscriptions201> => {
  
  const res = await fetch(getPostSubscriptionsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSubscriptionsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}
